"""
给你一个整数数组 prices ，其中 prices[i] 表示某支股票第 i 天的价格。

在每一天，你可以决定是否购买和/或出售股票。你在任何时候 最多 只能持有 一股 股票。你也可以先购买，然后在 同一天 出售。

返回 你能获得的 最大 利润 。

示例 1：

输入：prices = [7,1,5,3,6,4]
输出：7
解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。
     总利润为 4 + 3 = 7 。
示例 2：

输入：prices = [1,2,3,4,5]
输出：4
解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。
     总利润为 4 。
示例 3：

输入：prices = [7,6,4,3,1]
输出：0
解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。
"""
from typing import List

"""
贪心策略，每天都有交易，即今天买入一股，卖出昨天的一股，然后计算利润，为正的话就进行累加，其他情况不累加
贪心法：总是在局部中找到最优解，在这里，看做每天都有交易，则最优解就是交易后的金额为正值
为何可以看做每天都有交易，对于[1,2,3,4,5]而言，第一天买入，最后一天卖出收益最大，即P5-P1的收益最大
但是P5-1等价于(P2-P1)+(P3-P2)+(P4-P3)+(P5-P4)，可以看做每天都有交易，只不过要想保证收益最大化，每天的交易只要为正即可。
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) == 1:
            return 0
        profit = 0
        i,j = 0,1
        while j < len(prices):
            if prices[j] - prices[i] > 0:
                profit += prices[j] - prices[i]
            j += 1
            i += 1
        return profit

s = Solution()
ll = [7,1,5,3,6,4]

print(s.maxProfit(ll))