"""
 * 给定一个整数 n ，返回 n! 结果中尾随零的数量。
 *
 * 提示 n! = n * (n - 1) * (n - 2) * ... * 3 * 2 * 1
 * 示例 1：
 *
 * 输入：n = 3
 * 输出：0
 * 解释：3! = 6 ，不含尾随 0
 * 示例 2：
 *
 * 输入：n = 5
 * 输出：1
 * 解释：5! = 120 ，有一个尾随 0
 * 示例 3：
 *
 * 输入：n = 0
 * 输出：0
"""
"""    // 不用算出具体的值，阶乘后尾随0只有一种情况：偶数*5的倍数会出现0，如4*15，,6*35，,4*55等
    // 对于5的1次方，即5与5的倍数本身，与偶数相乘会有1个0，2*5，,4*5
    // 对于5的2次方，即25的倍数（同时也是5的倍数），与偶数相乘最多会有2个0，4*25，
    // 对于5的3次方，即125的倍数（同时也是5的倍数），与偶数相乘最多会有3个0，,8*125
    // ... 以此类推，由归纳法可得对于5的x次方，这个数必然是5的倍数，与偶数相乘最多会有x个0，这个情况在偶数为2的x次方时满足
    // 所以只需确定给定的数n，有几个5的倍数，在5的倍数中有几个25的倍数，在25的倍数中有几个125的倍数...即可"""
class Solution:
    def trailingZeroes(self, n: int) -> int:
        max_qurt = 1
        while pow(5,max_qurt) <= n:
            max_qurt += 1

        sum_zero = 0
        temp_multiple = int(n / 5)
        for i in range(max_qurt):
            sum_zero += int(temp_multiple)
            temp_multiple /= 5
        return sum_zero

if __name__ == "__main__":
    s = Solution()
    print(s.trailingZeroes(100000))
